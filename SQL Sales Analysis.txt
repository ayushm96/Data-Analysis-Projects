In this project, we will analyze sales data using SQL to address specific questions related to the sales data. This analysis involves extracting insights by 
querying and manipulating data stored in a database using SQL. This powerful framework allows us to aggregate sales figures, calculate metrics, and identify
trends in the sales data. The dataset covers sales from January 2023 to November 2023. We will focus on the sales table, which includes information such as
order ID, date, quantity, product ID, product category, location (state and city), invoice amount, and payment method. 

mysql> -- Taking a look at the data in the sales tables after importing it.
mysql> SELECT * FROM sales
    -> LIMIT 5;
+----------+---------------------+----------+------------+---------+------------+--------------+---------------+----------------+---------------------+
| order_id | order_date          | quantity | product_id | product | category   | ship_to_city | ship_to_state | invoice_amount | payment_method_code |
+----------+---------------------+----------+------------+---------+------------+--------------+---------------+----------------+---------------------+
| 10000050 | 2023-01-01 03:29:00 |        1 | 49         | Item 25 | Category 8 | Faridabad    | Haryana       |           1249 | CC                  |
| 10000051 | 2023-01-01 00:48:00 |        1 | 33         | Item 9  | Category 4 | Faridabad    | Haryana       |            939 | COD                 |
| 10000052 | 2023-01-01 00:34:00 |        1 | 39         | Item 15 | Category 6 | Thane        | Maharashtra   |           1149 | PayStation          |
| 10000053 | 2023-01-01 00:34:00 |        1 | 39         | Item 15 | Category 6 | Ernakulam    | Kerala        |           1149 | CC                  |
| 10000054 | 2023-01-01 02:00:00 |        1 | 39         | Item 15 | Category 6 | New Delhi    | Delhi         |           1149 | PayStation          |
+----------+---------------------+----------+------------+---------+------------+--------------+---------------+----------------+---------------------+
5 rows in set (0.09 sec)

mysql> -- Finding null values in the sales table
mysql> SELECT * FROM sales
    -> WHERE order_id IS NULL OR
    -> order_date IS NULL OR
    -> quantity IS NULL OR
    -> product_id IS NULL OR
    -> product IS NULL OR
    -> category IS NULL OR
    -> ship_to_city IS NULL OR
    -> ship_to_state IS NULL OR
    -> invoice_amount IS NULL OR
    -> payment_method_code IS NULL;
Empty set (0.10 sec)

mysql> -- Checking for duplicate values in the sales tables
mysql> SELECT order_id, order_date, product_id, product, category, count(*)
    -> FROM sales
    -> GROUP BY order_id, order_date, product_id, product, category
    -> HAVING count(*)>1;
Empty set (0.66 sec)

mysql> -- Top items by revenue
mysql> SELECT product, sum(invoice_amount) AS item_sales, count(invoice_amount) AS total_orders
    -> FROM sales
    -> GROUP BY product
    -> ORDER BY item_sales DESC
    -> LIMIT 10;
+---------+------------+--------------+
| product | item_sales | total_orders |
+---------+------------+--------------+
| Item 14 |   18704558 |         9689 |
| Item 15 |   14746704 |        13070 |
| Item 26 |    5725937 |         5619 |
| Item 4  |    4026977 |         3139 |
| Item 28 |    3328319 |         4871 |
| Item 3  |    3085919 |         2963 |
| Item 18 |    2951041 |         4535 |
| Item 25 |    2669584 |         2524 |
| Item 2  |    2273263 |         2941 |
| Item 9  |    2154434 |         2415 |
+---------+------------+--------------+
10 rows in set (0.07 sec)

mysql> -- Top cities by revenue
mysql> SELECT ship_to_state AS state, ship_to_city AS city, sum(invoice_amount) AS revenue, count(invoice_amount) AS orders
    -> FROM sales
    -> GROUP BY ship_to_state, ship_to_city
    -> ORDER BY revenue DESC
    -> LIMIT 10;
+---------------+-----------+---------+--------+
| state         | city      | revenue | orders |
+---------------+-----------+---------+--------+
| Karnataka     | Bengaluru | 9100128 |   8180 |
| Delhi         | New Delhi | 5415320 |   4874 |
| Telangana     | Hyderabad | 4646796 |   4326 |
| Maharashtra   | Mumbai    | 4109065 |   3611 |
| Tamil Nadu    | Chennai   | 2942051 |   2820 |
| Maharashtra   | Pune      | 2561748 |   2404 |
| Haryana       | Gurugram  | 2325343 |   2059 |
| West Bengal   | Kolkata   | 1601476 |   1525 |
| Uttar Pradesh | Noida     | 1462632 |   1319 |
| Uttar Pradesh | Ghaziabad | 1010113 |    938 |
+---------------+-----------+---------+--------+
10 rows in set (0.14 sec)

mysql> -- Top states by revenue
mysql> SELECT ship_to_state AS state, sum(invoice_amount) AS revenue, count(invoice_amount) AS orders
    -> FROM sales
    -> GROUP BY ship_to_state
    -> ORDER BY revenue DESC
    -> LIMIT 10;
+---------------+----------+--------+
| state         | revenue  | orders |
+---------------+----------+--------+
| Maharashtra   | 11328254 |  10258 |
| Karnataka     | 10993021 |   9911 |
| Uttar Pradesh |  6597170 |   6201 |
| Delhi         |  5954514 |   5352 |
| Tamil Nadu    |  5695087 |   5576 |
| Telangana     |  5378758 |   5041 |
| Haryana       |  4277138 |   3872 |
| West Bengal   |  3245833 |   3081 |
| Gujarat       |  2453529 |   2278 |
| Punjab        |  2079883 |   1918 |
+---------------+----------+--------+
10 rows in set (0.07 sec)

mysql> -- Ranking revenue for top items in top cities (more than 25 Lakhs total revenue for items and cities)
mysql> WITH item_city AS (SELECT ship_to_city, product, sum(invoice_amount) AS revenue,
    -> RANK() OVER(PARTITION BY product ORDER BY sum(invoice_amount) DESC) AS sales_rank_by_city
    -> FROM sales
    -> GROUP BY ship_to_city, product)
    -> SELECT product, ship_to_city, revenue, sales_rank_by_city
    -> FROM item_city
    -> WHERE sales_rank_by_city < 5
    -> AND ship_to_city IN (SELECT ship_to_city FROM sales
    -> GROUP BY ship_to_city
    -> HAVING sum(invoice_amount) > 2500000)
    -> AND product IN (SELECT product
    -> FROM sales
    -> GROUP BY product
    -> HAVING sum(invoice_amount) > 2500000)
    -> ORDER BY product;
+---------+--------------+---------+--------------------+
| product | ship_to_city | revenue | sales_rank_by_city |
+---------+--------------+---------+--------------------+
| Item 14 | Bengaluru    | 2725471 |                  1 |
| Item 14 | Mumbai       | 1443608 |                  2 |
| Item 14 | New Delhi    | 1418485 |                  3 |
| Item 14 | Hyderabad    | 1330223 |                  4 |
| Item 15 | Bengaluru    | 1923357 |                  1 |
| Item 15 | Hyderabad    | 1100036 |                  2 |
| Item 15 | New Delhi    | 1092091 |                  3 |
| Item 15 | Chennai      |  735439 |                  4 |
| Item 18 | Bengaluru    |  326928 |                  1 |
| Item 18 | Hyderabad    |  262071 |                  2 |
| Item 18 | New Delhi    |  172417 |                  3 |
| Item 18 | Chennai      |  170702 |                  4 |
| Item 25 | Bengaluru    |  345770 |                  1 |
| Item 25 | New Delhi    |  199324 |                  2 |
| Item 25 | Hyderabad    |  142890 |                  3 |
| Item 25 | Mumbai       |  125788 |                  4 |
| Item 26 | Bengaluru    |  616812 |                  1 |
| Item 26 | New Delhi    |  452205 |                  2 |
| Item 26 | Hyderabad    |  258207 |                  3 |
| Item 26 | Mumbai       |  217862 |                  4 |
| Item 28 | Bengaluru    |  433792 |                  1 |
| Item 28 | New Delhi    |  243313 |                  2 |
| Item 28 | Mumbai       |  211704 |                  3 |
| Item 28 | Hyderabad    |  174700 |                  4 |
| Item 3  | Bengaluru    |  331640 |                  1 |
| Item 3  | New Delhi    |  274867 |                  2 |
| Item 3  | Mumbai       |  216719 |                  3 |
| Item 3  | Hyderabad    |  157350 |                  4 |
| Item 4  | New Delhi    |  332926 |                  1 |
| Item 4  | Bengaluru    |  286543 |                  2 |
| Item 4  | Mumbai       |  197078 |                  3 |
| Item 4  | Hyderabad    |  154694 |                  4 |
+---------+--------------+---------+--------------------+
32 rows in set (0.43 sec)

mysql> -- Analyzing inventory status using orders, recommending inventory for December month of 2023 (data is till November 2023 only)
mysql> WITH item_sales AS (SELECT product_id, product, sum(quantity) AS total_orders
    -> FROM sales
    -> WHERE date(order_date) BETWEEN '2023-11-16' AND '2023-11-30'
    -> GROUP BY product_id, product)
    -> SELECT product, total_orders,
    -> round(total_orders/14,0) AS daily_average,
    -> round(p.total_inventory/(total_orders/14),0) AS days_inventory_remaining,
    -> CASE WHEN round(p.total_inventory/(total_orders/14),0) = 0 THEN 'Out of Stock'
    ->      WHEN round(p.total_inventory/(total_orders/14),0) <= 6 THEN 'Very Low Inventory'
    ->      WHEN round(p.total_inventory/(total_orders/14),0) BETWEEN 7 AND 11 THEN 'Low Inventory'
    ->      ELSE 'Okay'
    ->      END AS inventory_status
    -> FROM item_sales
    -> INNER JOIN product p ON p.product_id=item_sales.product_id
    -> ORDER BY total_orders DESC;
+---------+--------------+---------------+--------------------------+--------------------+
| product | total_orders | daily_average | days_inventory_remaining | inventory_status   |
+---------+--------------+---------------+--------------------------+--------------------+
| Item 14 |         1676 |           120 |                        4 | Very Low Inventory |
| Item 15 |          942 |            67 |                        7 | Low Inventory      |
| Item 18 |          497 |            36 |                        6 | Very Low Inventory |
| Item 26 |          496 |            35 |                        7 | Low Inventory      |
| Item 3  |          423 |            30 |                        5 | Very Low Inventory |
| Item 28 |          329 |            24 |                        2 | Very Low Inventory |
| Item 23 |          282 |            20 |                        4 | Very Low Inventory |
| Item 4  |          249 |            18 |                        8 | Low Inventory      |
| Item 6  |          224 |            16 |                        6 | Very Low Inventory |
| Item 2  |          220 |            16 |                       13 | Okay               |
| Item 25 |          184 |            13 |                       11 | Low Inventory      |
| Item 5  |          172 |            12 |                        4 | Very Low Inventory |
| Item 30 |          171 |            12 |                        4 | Very Low Inventory |
| Item 22 |          126 |             9 |                        8 | Low Inventory      |
| Item 9  |          120 |             9 |                       18 | Okay               |
| Item 7  |           98 |             7 |                        7 | Low Inventory      |
| Item 19 |           98 |             7 |                        7 | Low Inventory      |
| Item 8  |           85 |             6 |                        8 | Low Inventory      |
| Item 24 |           75 |             5 |                        9 | Low Inventory      |
| Item 21 |           60 |             4 |                       12 | Okay               |
| Item 13 |           55 |             4 |                       13 | Okay               |
| Item 37 |           51 |             4 |                       14 | Okay               |
| Item 10 |           36 |             3 |                       19 | Okay               |
| Item 11 |           34 |             2 |                       21 | Okay               |
| Item 29 |           25 |             2 |                       28 | Okay               |
| Item 20 |           15 |             1 |                       47 | Okay               |
| Item 16 |           14 |             1 |                       50 | Okay               |
| Item 36 |           14 |             1 |                       50 | Okay               |
| Item 38 |           13 |             1 |                       54 | Okay               |
| Item 27 |           10 |             1 |                       70 | Okay               |
| Item 33 |            8 |             1 |                       88 | Okay               |
| Item 1  |            8 |             1 |                       88 | Okay               |
| Item 34 |            7 |             1 |                      100 | Okay               |
| Item 35 |            4 |             0 |                      175 | Okay               |
+---------+--------------+---------------+--------------------------+--------------------+
34 rows in set (1.06 sec)

mysql> -- Sales by time of day for the 4th quarter to optimize ad spends during those hours with high chance of conversion
mysql> WITH hourly_sales_data AS (SELECT hour(order_date) AS hour_of_day, quantity, invoice_amount,
    -> CASE WHEN hour(order_date) BETWEEN 0 AND 2 THEN 'Late Night (12-2 AM)'
    ->      WHEN hour(order_date) BETWEEN 3 AND 6 THEN 'Early Morning (3-6 AM)'
    ->      WHEN hour(order_date) BETWEEN 7 AND 11 THEN 'Morning (7-11 AM)'
    ->      WHEN hour(order_date) BETWEEN 12 AND 15 THEN 'Afternoon (12-3 PM)'
    ->      WHEN hour(order_date) BETWEEN 16 AND 20 THEN 'Evening (4-8 PM)'
    ->      ELSE 'Night (9-11 PM)'
    ->      END AS time_of_day
    -> FROM sales
    -> WHERE quarter(order_date) = 4)
    -> SELECT time_of_day, count(invoice_amount) AS orders, sum(invoice_amount) AS revenue,
    -> round(sum(invoice_amount)/(sum(sum(invoice_amount)) OVER ())*100,2) AS quarter_revenue_pct
    -> FROM hourly_sales_data
    -> GROUP BY time_of_day
    -> ORDER BY quarter_revenue_pct DESC;
+------------------------+--------+---------+---------------------+
| time_of_day            | orders | revenue | quarter_revenue_pct |
+------------------------+--------+---------+---------------------+
| Evening (4-8 PM)       |   5384 | 4938791 |               26.59 |
| Afternoon (12-3 PM)    |   4347 | 4010582 |               21.60 |
| Night (9-11 PM)        |   4100 | 3780985 |               20.36 |
| Morning (7-11 AM)      |   3917 | 3618669 |               19.49 |
| Late Night (12-2 AM)   |   1864 | 1728805 |                9.31 |
| Early Morning (3-6 AM) |    539 |  493496 |                2.66 |
+------------------------+--------+---------+---------------------+
6 rows in set (0.05 sec)

mysql> -- Monthly revenue and orders for 2023
mysql> SELECT monthname(order_date) AS month_name,
    -> sum(invoice_amount) AS revenue, count(invoice_amount) AS orders,
    -> round((sum(invoice_amount)/sum(sum(invoice_amount)) OVER ()*100),2) AS pct_total_revenue
    -> FROM sales
    -> WHERE year(order_date) <> 2022
    -> GROUP BY monthname(order_date)
    -> ORDER BY revenue DESC;
+------------+----------+--------+-------------------+
| month_name | revenue  | orders | pct_total_revenue |
+------------+----------+--------+-------------------+
| November   | 11820701 |  12773 |             16.37 |
| August     |  9054978 |   8448 |             12.54 |
| May        |  7200323 |   6095 |              9.97 |
| October    |  6748169 |   7376 |              9.34 |
| February   |  6284995 |   5473 |              8.70 |
| September  |  6224605 |   5616 |              8.62 |
| July       |  5772637 |   4932 |              7.99 |
| June       |  5450851 |   4861 |              7.55 |
| April      |  4930167 |   4286 |              6.83 |
| March      |  4563310 |   3549 |              6.32 |
| January    |  4179208 |   3485 |              5.79 |
+------------+----------+--------+-------------------+
11 rows in set (0.27 sec)

mysql> -- Monthly sales change for 2023
mysql> SELECT month(order_date) AS month_number, monthname(order_date) as month_name, sum(invoice_amount) AS revenue,
    -> round((sum(invoice_amount) - LAG(sum(invoice_amount)) OVER ())/(LAG(sum(invoice_amount)) OVER ())*100,2) AS pct_change
    -> FROM sales
    -> WHERE year(order_date) <> '2022'
    -> GROUP BY month(order_date), monthname(order_date)
    -> ORDER BY month(order_date);
+--------------+------------+----------+------------+
| month_number | month_name | revenue  | pct_change |
+--------------+------------+----------+------------+
|            1 | January    |  4179208 |       NULL |
|            2 | February   |  6284995 |      50.39 |
|            3 | March      |  4563310 |     -27.39 |
|            4 | April      |  4930167 |       8.04 |
|            5 | May        |  7200323 |      46.05 |
|            6 | June       |  5450851 |     -24.30 |
|            7 | July       |  5772637 |       5.90 |
|            8 | August     |  9054978 |      56.86 |
|            9 | September  |  6224605 |     -31.26 |
|           10 | October    |  6748169 |       8.41 |
|           11 | November   | 11820701 |      75.17 |
+--------------+------------+----------+------------+
11 rows in set (0.14 sec)

mysql> -- Analyze sales by months as a percent of the sale during the whole respective quarter
mysql> SELECT quarter(order_date) AS qtr, monthname(order_date) AS month_name, sum(invoice_amount) AS monthly_revenue,
    -> sum(sum(invoice_amount)) OVER (PARTITION BY quarter(order_date)) AS quarterly_revenue,
    -> round((sum(invoice_amount)/(sum(sum(invoice_amount)) OVER (PARTITION BY quarter(order_date))))*100,2) AS pct_of_quarter
    -> FROM sales
    -> WHERE quarter(order_date) <> 4
    -> GROUP BY quarter(order_date), monthname(order_date);
+------+------------+-----------------+-------------------+----------------+
| qtr  | month_name | monthly_revenue | quarterly_revenue | pct_of_quarter |
+------+------------+-----------------+-------------------+----------------+
|    1 | January    |         4179208 |          15027513 |          27.81 |
|    1 | February   |         6284995 |          15027513 |          41.82 |
|    1 | March      |         4563310 |          15027513 |          30.37 |
|    2 | April      |         4930167 |          17581341 |          28.04 |
|    2 | May        |         7200323 |          17581341 |          40.95 |
|    2 | June       |         5450851 |          17581341 |          31.00 |
|    3 | July       |         5772637 |          21052220 |          27.42 |
|    3 | August     |         9054978 |          21052220 |          43.01 |
|    3 | September  |         6224605 |          21052220 |          29.57 |
+------+------------+-----------------+-------------------+----------------+
9 rows in set (0.08 sec)

mysql> -- Sales by day of week (Sunday, Monday, etc.) as a percent of the sale during the whole respective quarter
mysql> SELECT quarter(order_date) AS qtr, dayname(order_date) AS day_of_week, sum(invoice_amount) AS revenue,
    -> round((sum(invoice_amount)/(sum(sum(invoice_amount)) OVER (PARTITION BY quarter(order_date))))*100,2) AS pct_of_qtr
    -> FROM sales
    -> WHERE quarter(order_date) = 3
    -> GROUP BY quarter(order_date), dayname(order_date)
    -> ORDER BY pct_of_qtr DESC;
+------+-------------+---------+------------+
| qtr  | day_of_week | revenue | pct_of_qtr |
+------+-------------+---------+------------+
|    3 | Saturday    | 3152249 |      14.97 |
|    3 | Sunday      | 3151410 |      14.97 |
|    3 | Thursday    | 3037876 |      14.43 |
|    3 | Wednesday   | 2995616 |      14.23 |
|    3 | Tuesday     | 2948582 |      14.01 |
|    3 | Friday      | 2893522 |      13.74 |
|    3 | Monday      | 2872965 |      13.65 |
+------+-------------+---------+------------+
7 rows in set (0.06 sec)

mysql> -- Calculating 7 day moving average sales for last 14 days of November 2023. For first 6 days average is for number of days between them
mysql> SELECT date(order_date), sum(invoice_amount) AS daily_sales,
    -> ROUND(AVG(SUM(invoice_amount)) OVER (ORDER BY date(order_date) RANGE BETWEEN INTERVAL 6 DAY PRECEDING AND CURRENT ROW),0) as moving_7_day_average
    -> FROM sales
    -> WHERE year(order_date) <> 2022 AND (date(order_date) BETWEEN '2023-11-16' AND '2023-11-30')
    -> GROUP BY date(order_date)
    -> ORDER BY date(order_date) ASC;
+------------------+-------------+----------------------+
| date(order_date) | daily_sales | moving_7_day_average |
+------------------+-------------+----------------------+
| 2023-11-16       |      446664 |               446664 |
| 2023-11-17       |      432513 |               439589 |
| 2023-11-18       |      420671 |               433283 |
| 2023-11-19       |      362142 |               415498 |
| 2023-11-20       |      451890 |               422776 |
| 2023-11-21       |      465734 |               429936 |
| 2023-11-22       |      477320 |               436705 |
| 2023-11-23       |      420806 |               433011 |
| 2023-11-24       |      427575 |               432305 |
| 2023-11-25       |      429155 |               433517 |
| 2023-11-26       |      445825 |               445472 |
| 2023-11-27       |      396690 |               437586 |
| 2023-11-28       |      379553 |               425275 |
| 2023-11-29       |      348738 |               406906 |
| 2023-11-30       |      362681 |               398602 |
+------------------+-------------+----------------------+
15 rows in set (0.06 sec)

mysql> -- Analyzing orders by week of month
mysql> WITH daily_sales AS (SELECT day(order_date) AS day_part, date(order_date) AS order_date, invoice_amount,
    -> CASE WHEN day(order_date) BETWEEN 1 AND 8 THEN 'Week 1'
    ->      WHEN day(order_date) BETWEEN 9 AND 15 THEN 'Week 2'
    ->      WHEN day(order_date) BETWEEN 16 AND 22 THEN 'Week 3'
    ->      ELSE 'Week 4'
    ->      END AS week_of_month
    -> FROM sales)
    -> SELECT week_of_month, sum(invoice_amount) AS revenue,
    -> ROUND(SUM(invoice_amount)/(SUM(SUM(invoice_amount)) OVER ())*100,2) AS pct_sales
    -> FROM daily_sales
    -> GROUP BY week_of_month
    -> ORDER BY pct_sales DESC;
+---------------+----------+-----------+
| week_of_month | revenue  | pct_sales |
+---------------+----------+-----------+
| Week 4        | 19423287 |     26.89 |
| Week 1        | 19187865 |     26.56 |
| Week 2        | 16977381 |     23.50 |
| Week 3        | 16643869 |     23.04 |
+---------------+----------+-----------+
4 rows in set (0.09 sec)

























